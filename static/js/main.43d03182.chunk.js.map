{"version":3,"sources":["Components/Button.tsx","Components/Counter.tsx","Components/Input.tsx","Components/SettingsCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","onClick","disabled","title","Counter","dis","error","counter","valueMax","setCounter","valueMin","Input","type","value","onChange","SettingsCounter","useEffect","valueAsString","localStorage","getItem","min","JSON","parse","setValueMin","max","setValueMax","e","target","Number","setError","setItem","stringify","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43d03182.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    className: string\r\n    onClick: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            onClick={props.onClick}\r\n            disabled={props.disabled}>{props.title}</button>\r\n    )\r\n}\r\n\r\n","import {Button} from \"./Button\";\r\nimport React from \"react\";\r\n\r\ntype CounterPropsType = {\r\n    error: boolean | string\r\n    valueMin: number\r\n    valueMax: number\r\n    counter: number | string\r\n    setCounter: (counter: number | string) => void\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n\r\n    const incNumberHandler = () => {\r\n        if(typeof (props.counter) !== 'string')\r\n            props.setCounter(props.counter + 1)\r\n    }\r\n    const resetInc = () => {\r\n        if(typeof (props.counter) !== 'string')\r\n            props.setCounter(props.valueMin)\r\n    }\r\n\r\n    const dis = !!props.error || props.counter === props.valueMax || (typeof (props.counter) === 'string')\r\n\r\n    return (\r\n        <div className=\"counterBox\">\r\n            <div className='counter'>\r\n                <div>\r\n                    {props.error ? <div className={'hError'}>{props.error}</div>\r\n                        : <div className={props.counter >= props.valueMax ? 'Er' : 'h'}>{props.counter}</div>}\r\n                </div>\r\n            </div>\r\n            <div className='counterButton'>\r\n                <Button title={\"Inc\"} className={'cButton'} onClick={incNumberHandler} disabled={dis}/>\r\n                <Button title={\"RESET\"} className={'cButton'} onClick={resetInc} disabled={!!props.error || (typeof (props.counter) === 'string')}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    className: string\r\n    value: number\r\n    onChange:(e: ChangeEvent<HTMLInputElement>)=>void\r\n}\r\n\r\nexport const Input = (props:InputPropsType) => {\r\n\r\n    return (\r\n        <input className={props.className} type={\"number\"} value={props.value}\r\n               onChange={props.onChange}/>\r\n    )\r\n}","import {Input} from \"./Input\";\r\nimport {Button} from \"./Button\";\r\nimport React, {ChangeEvent, useEffect} from \"react\";\r\n\r\ntype SettingsCounterPropsType = {\r\n    error: boolean | string\r\n    valueMin: number\r\n    valueMax: number\r\n    setError: (error: boolean | string) => void\r\n    setValueMin: (value: number) => void\r\n    setValueMax: (value: number) => void\r\n    setCounter: (counter: any) => void\r\n}\r\n\r\nexport const SettingsCounter = (props: SettingsCounterPropsType) => {\r\n\r\n\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem('minValue')\r\n        if (valueAsString) {\r\n            let min = JSON.parse(valueAsString)\r\n            props.setValueMin(min)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem('maxValue')\r\n        if (valueAsString) {\r\n            let max = JSON.parse(valueAsString)\r\n            props.setValueMax(max)\r\n        }\r\n    }, [])\r\n\r\n    const setValues = () => {\r\n        localStorage.setItem('minValue', JSON.stringify(props.valueMin))\r\n        localStorage.setItem('maxValue', JSON.stringify(props.valueMax))\r\n        props.setCounter(props.valueMin)\r\n        props.setError(false)\r\n    }\r\n    const onChangeMin = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let min = e.target.value\r\n        let valueMin = Number(min)\r\n        props.setValueMin(valueMin)\r\n        props.setCounter('Press Set')\r\n        if (valueMin >= props.valueMax) {\r\n            props.setError('Incorrect value!')\r\n        } else {\r\n            props.setError(false)\r\n        }\r\n    }\r\n    const onChangeMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let max = e.target.value\r\n        let valueMax = Number(max)\r\n        props.setValueMax(valueMax)\r\n        props.setCounter('Press Set')\r\n        if (valueMax <= props.valueMin) {\r\n            props.setError('Incorrect value!')\r\n        } else {\r\n            props.setError(false)\r\n        }\r\n    }\r\n\r\n    const dis = props.valueMin >= props.valueMax\r\n\r\n    return (\r\n        <div className=\"settingBox\">\r\n            <div className=\"inputBox\">\r\n                MinValue\r\n                <Input className={props.error ? 'inputError' : 'input'}\r\n                       value={props.valueMin}\r\n                       onChange={onChangeMin}/>\r\n            </div>\r\n            <div className=\"inputBox\">\r\n                MaxValue\r\n                <Input className={props.error ? 'inputError' : 'input'}\r\n                       value={props.valueMax}\r\n                       onChange={onChangeMax}/>\r\n            </div>\r\n            <div>\r\n                <Button title={'set'}\r\n                        className={'button'}\r\n                        disabled={dis}\r\n                        onClick={setValues}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Components/Counter\";\nimport {SettingsCounter} from \"./Components/SettingsCounter\";\nimport {Input} from \"./Components/Input\";\n\nfunction App() {\n\n    const [valueMin, setValueMin] = useState<number>(0)\n    const [valueMax, setValueMax] = useState<number>(0)\n    const [error, setError] = useState<boolean | string>(false)\n    const [counter, setCounter] = useState<number | string>('Press Set')\n\n    return (\n        <div className=\"wrapper\">\n            <SettingsCounter error={error}\n                             valueMin={valueMin}\n                             valueMax={valueMax}\n                             setError={setError}\n                             setValueMin={setValueMin}\n                             setValueMax={setValueMax}\n                             setCounter={setCounter}/>\n            <Counter error={error}\n                     valueMin={valueMin}\n                     valueMax={valueMax}\n                     setCounter={setCounter}\n                     counter={counter}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}